import e from"vanjs-core";class t{initialValues;fields;validator;validationMode;constructor(t){this.initialValues=t.initialValues,this.fields={},this.validator=t.validator??(e=>Promise.resolve(e)),this.validationMode=t.validationMode??"onsubmit";for(const i in t.initialValues)this.fields[i]={value:e.state(t.initialValues[i]),touched:e.state(!1),error:e.state("")}}register(t,i){const s=this.fields[t],o="checkbox"===i?.type,a="radio"===i?.type;if(s){const r=e=>{const r=e.target,l=a?i?.value:o?r.checked:r.value;s.value.val=l,"oninput"===this.validationMode&&this.validateField(t),i?.oninput?.(e)},l=e=>{s.touched.val=!0,i?.onfocus?.(e)};return o?{...i,name:t,value:s.value,checked:s.value,oninput:r,onfocus:l}:a?{...i,name:t,value:i?.value,checked:e.derive((()=>s.value.val===i?.value)),oninput:r,onfocus:l}:{...i,name:t,value:s.value,oninput:r,onfocus:l}}throw new Error(`No field named "${t}"`)}get(e){const t=this.fields[e];if(!t)throw new Error(`No field named "${e}"`);return t.value.val}set(e,t){const i=this.fields[e];if(!i)throw new Error(`No field named "${e}"`);i.value.val=t,"oninput"===this.validationMode&&this.validateField(e)}error(e){const t=this.fields[e];if(!t)throw new Error(`No field named "${e}"`);return t.error.val}watch(...t){return e.derive((()=>{const e={};if(t.length>0)for(const i of t){const t=this.fields[i];e[i]=t.value.val}else for(const t in this.fields){const i=this.fields[t];e[t]=i.value.val}return e}))}reset(...e){if(e.length>0)for(const t of e){const e=this.fields[t];e.value.val=this.initialValues[t],e.touched.val=!1,e.error.val=""}else for(const e in this.fields){const t=this.fields[e];t.value.val=this.initialValues[e],t.touched.val=!1,t.error.val=""}}handleSubmit(e){return t=>{t.preventDefault();const s={};for(const e in this.fields){const t=this.fields[e];s[e]=t.value.val}this.validator(s).then((t=>{if(t instanceof i)for(const e in this.fields){const i=t.errors[e],s=this.fields[e];s&&(s.error.val=i??"")}else{for(const e in this.fields){this.fields[e].error.val=""}e(t)}}))}}validateField(e){const t=this.fields[e];if(t){const s={};for(const e in this.fields){const t=this.fields[e];s[e]=t.value.val}this.validator(s).then((s=>{if(s instanceof i){const i=s.errors[e];t.error.val=i??""}else t.error.val=""}))}}}class i{errors;constructor(e){this.errors=e}}const s=e=>async t=>{try{return await e.validate(t,{abortEarly:!1})}catch(e){const t=e,s={};return t.errors.forEach(((e,i)=>{s[t.inner[i].path]=e})),new i(s)}};export{t as Form,s as yupValidator};
